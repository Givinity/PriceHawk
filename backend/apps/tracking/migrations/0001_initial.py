# Generated by Django 5.2.5 on 2025-09-01 17:31

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ParseTarget",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[("avito", "Avito")],
                        default="avito",
                        help_text="Площадка-источник (в MVP: Avito).",
                        max_length=32,
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[("listing", "Listing")],
                        default="listing",
                        help_text="Режим: только листинг (страница со списком объявлений).",
                        max_length=16,
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="Полный URL. Рекомендуется хранить нормализованный адрес с параметрами.",
                        max_length=2000,
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True,
                        help_text="Город/регион (если влияет на выдачу; опционально).",
                        max_length=64,
                    ),
                ),
                (
                    "frequency_minutes",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="Периодичность парсинга в минутах (не менее 5).",
                        validators=[django.core.validators.MinValueValidator(5)],
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Флаг мягкого выключения цели без удаления.",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Когда цель была создана."
                    ),
                ),
                (
                    "last_run_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Когда цель обрабатывалась последний раз.",
                        null=True,
                    ),
                ),
                (
                    "next_run_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Когда цель должна быть обработана в следующий раз (для планировщика).",
                        null=True,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="Владелец цели. Ограничиваем видимость и используем для квот/лимитов.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parse_targets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Цель парсинга",
                "verbose_name_plural": "Цели парсинга",
            },
        ),
        migrations.CreateModel(
            name="Ad",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[("avito", "Avito")],
                        help_text="Площадка-источник (Avito и др. в будущем).",
                        max_length=32,
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        help_text="Первичный идентификатор объявления на площадке (например, id Avito).",
                        max_length=128,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Заголовок объявления (усечённый до 512 символов).",
                        max_length=512,
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="Прямой URL на объявление.", max_length=2000
                    ),
                ),
                (
                    "seller_name",
                    models.CharField(
                        blank=True,
                        help_text="Имя/название продавца (если доступно).",
                        max_length=256,
                    ),
                ),
                (
                    "seller_id",
                    models.CharField(
                        blank=True,
                        help_text="Идентификатор продавца на площадке.",
                        max_length=128,
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Локация/город из карточки.",
                        max_length=256,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="RUB",
                        help_text="Код валюты (ISO, например RUB).",
                        max_length=8,
                    ),
                ),
                (
                    "price_current",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Актуальная цена по последнему сбору (если удалось извлечь).",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "posted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата публикации объявления (если доступно).",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Активность объявления. Выключаем, если исчезло из выдачи/404 и т.п.",
                    ),
                ),
                (
                    "last_seen_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Когда это объявление в последний раз было замечено парсером.",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Когда объявление впервые появилось у нас.",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        blank=True,
                        help_text="Цель, в рамках которой объявление было обнаружено (может быть NULL).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ads",
                        to="tracking.parsetarget",
                    ),
                ),
            ],
            options={
                "verbose_name": "Объявление",
                "verbose_name_plural": "Объявления",
                "ordering": ["-last_seen_at"],
            },
        ),
        migrations.CreateModel(
            name="PricePoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Значение цены на момент сбора.",
                        max_digits=12,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="RUB",
                        help_text="Код валюты (ISO, например RUB).",
                        max_length=8,
                    ),
                ),
                (
                    "collected_at",
                    models.DateTimeField(
                        help_text="Момент времени (UTC), когда зафиксирована эта цена."
                    ),
                ),
                (
                    "ad",
                    models.ForeignKey(
                        help_text="Объявление, к которому относится эта цена.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_points",
                        to="tracking.ad",
                    ),
                ),
            ],
            options={
                "verbose_name": "История цены",
                "verbose_name_plural": "История цен",
                "ordering": ["-collected_at"],
            },
        ),
        migrations.AddIndex(
            model_name="parsetarget",
            index=models.Index(
                fields=["source", "mode"], name="parse_target_src_mode_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="parsetarget",
            index=models.Index(fields=["is_active"], name="parse_target_active_idx"),
        ),
        migrations.AddIndex(
            model_name="parsetarget",
            index=models.Index(
                fields=["next_run_at"], name="parse_target_next_run_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="parsetarget",
            index=models.Index(
                fields=["owner", "is_active"], name="parse_target_owner_active_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="parsetarget",
            constraint=models.UniqueConstraint(
                fields=("owner", "source", "url"),
                name="parse_target_owner_source_url_uniq",
            ),
        ),
        migrations.AddIndex(
            model_name="ad",
            index=models.Index(
                fields=["source", "external_id"], name="ad_src_extid_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ad",
            index=models.Index(fields=["is_active"], name="ad_active_idx"),
        ),
        migrations.AddIndex(
            model_name="ad",
            index=models.Index(fields=["last_seen_at"], name="ad_last_seen_idx"),
        ),
        migrations.AddIndex(
            model_name="ad",
            index=models.Index(fields=["target"], name="ad_target_idx"),
        ),
        migrations.AddIndex(
            model_name="ad",
            index=models.Index(fields=["posted_at"], name="ad_posted_at_idx"),
        ),
        migrations.AddConstraint(
            model_name="ad",
            constraint=models.UniqueConstraint(
                fields=("source", "external_id"), name="ad_source_external_id_uniq"
            ),
        ),
        migrations.AddIndex(
            model_name="pricepoint",
            index=models.Index(
                fields=["ad", "collected_at"], name="price_point_ad_dt_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="pricepoint",
            constraint=models.UniqueConstraint(
                fields=("ad", "collected_at", "price"),
                name="price_point_ad_dt_price_uniq",
            ),
        ),
    ]
